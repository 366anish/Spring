/*
 * Copyright 2002-2014 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.springframework.cache.interceptor;

import java.lang.reflect.Method;

import org.springframework.aop.framework.AopProxyUtils;

/**
 * Simple key generator that takes the target signature into account.
 * Returns a {@link SimpleKey} of the target class name, method signature,
 * target hash code, and parameters.
 *
 * <p>Unlike {@link DefaultKeyGenerator}, no collisions will occur with the keys
 * generated by this class. The returned {@link SimpleKey} object can be safely
 * used with a {@link org.springframework.cache.concurrent.ConcurrentMapCache},
 * however, might not be suitable for all {@link org.springframework.cache.Cache}
 * implementations.
 *
 * @author Craig Andrews
 * @author Phillip Webb
 * @author Juergen Hoeller
 * @since 4.1
 * @see SimpleKey
 * @see DefaultKeyGenerator
 * @see SimpleKeyGenerator
 * @see org.springframework.cache.annotation.CachingConfigurer
 */
public class SimpleSignatureKeyGenerator implements KeyGenerator {

	private final KeyGenerator wrapped;

	public SimpleSignatureKeyGenerator(){
		this.wrapped = new SimpleKeyGenerator();
	}

	public SimpleSignatureKeyGenerator(KeyGenerator wrapped){
		this.wrapped = wrapped;
	}

	@Override
	public Object generate(Object target, Method method, Object... params) {
		final Class<?> objClass = AopProxyUtils.ultimateTargetClass(target);
		return new SimpleKey(
				objClass.getName().intern(),
				method.toString().intern(),
				target.hashCode(),
				wrapped.generate(target, method, params));
	}

}
