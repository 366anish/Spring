description = "Spring R2DBC"

apply plugin: "kotlin"

dependencies {
	api(project(":spring-beans"))
	api(project(":spring-core"))
	api(project(":spring-tx"))
	api("io.r2dbc:r2dbc-spi")
	api("io.projectreactor:reactor-core")
	optional("org.jetbrains.kotlin:kotlin-reflect")
	optional("org.jetbrains.kotlin:kotlin-stdlib")
	optional("org.jetbrains.kotlinx:kotlinx-coroutines-core")
	optional("org.jetbrains.kotlinx:kotlinx-coroutines-reactor")
	optional("io.r2dbc:r2dbc-proxy")
	optional("io.micrometer:micrometer-api")
	optional("io.micrometer:micrometer-tracing")
	testImplementation(testFixtures(project(":spring-beans")))
	testImplementation(testFixtures(project(":spring-core")))
	testImplementation(testFixtures(project(":spring-context")))
	testImplementation("io.projectreactor:reactor-test")
	testImplementation("io.r2dbc:r2dbc-h2")
	testImplementation("io.r2dbc:r2dbc-spi-test:0.9.1.RELEASE") {
		exclude group: "org.springframework", module: "spring-jdbc"
	}
	testImplementation("io.micrometer:micrometer-test")
	testImplementation("io.micrometer:micrometer-tracing-test")
	testImplementation("io.micrometer:micrometer-tracing-integration-test")
}

ext {
	micrometerDocsVersion = "1.0.0-M1"
}

configurations {
	adoc
}

dependencies {
	adoc "io.micrometer:micrometer-docs-generator-spans:$micrometerDocsVersion"
	adoc "io.micrometer:micrometer-docs-generator-metrics:$micrometerDocsVersion"
}

task generateObservabilityDocs(dependsOn: ["generateObservabilityMetricsDocs", "generateObservabilitySpansDocs"]) {
}

task generateObservabilityMetricsDocs(type: JavaExec) {
	mainClass = "io.micrometer.docs.metrics.DocsFromSources"
	classpath configurations.adoc
	args project.projectDir.getAbsolutePath(), ".*", project.buildDir.getAbsolutePath()
}

task generateObservabilitySpansDocs(type: JavaExec) {
	mainClass = "io.micrometer.docs.spans.DocsFromSources"
	classpath configurations.adoc
	args project.projectDir.getAbsolutePath(), ".*", project.buildDir.getAbsolutePath()
}
